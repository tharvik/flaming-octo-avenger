#ifndef PROGRAM_HPP
#define PROGRAM_HPP

#include "Shader.hpp"

#include "OpenGL.hpp"
#include "Util.hpp"

#include <string>

/**
 * A program is a set of Shader compiled and linked together
 */
class Program : public Util::ref_counted {

public:
	/**
	 * Construct a Program with the given name (thus the name used for the Shaders)
	 *
	 * @param name name used to load the file and forwarded to the Shader
	 */
	Program(std::string const name);

	/**
	 * Destructor for the Program to delete the program in OpenGL
	 */
	~Program();

	/**
	 * Bind to OpenGL
	 */
	void bind() const;

	/**
	 * Clean binding
	 */
	void unbind() const;

private:
	/**
	 * The Shader<Vertex> used by this program
	 */
	Shader<Vertex> vshader;

	/**
	 * The Shader<Fragment> used by this program
	 */
	Shader<Fragment> fshader;

public:
	/**
	 * The id generated by OpenGL
	 */
	GLuint const id;

	/**
	 * Operator used on set; use the id given by OpenGL
	 *
	 * @param obj Program to compare to
	 *
	 * @return this->id < obj.id;
	 */
	bool operator<(Program const & obj) const;

private:
	/**
	 * Based on the given Shaders, link these and return the generated program id
	 *
	 * @param vshader Shader<Vertex> to link in the program
	 * @param fshader Shader<Fragment> to link in the program
	 *
	 * @return id generated by OpenGL
	 */
	static GLuint get_program(Shader<Vertex> vshader,
				  Shader<Fragment> fshader);
};

#endif
